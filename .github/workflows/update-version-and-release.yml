name: Update Version and Release

on:
  push:
    branches:
      - master
    paths:
      - 'readme.txt'
  workflow_dispatch:

jobs:
  update-version:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Read version and check tag
      id: read_version
      shell: pwsh
      run: |
        $content = Get-Content readme.txt
        if ($content[4] -match '\d+\.\d+\.\d+') {
            $version = $matches[0]
            echo "version=$version" >> $env:GITHUB_OUTPUT
            
            $existingTag = git tag -l "v$version"
            if ($existingTag) {
                echo "Tag v$version already exists"
                exit 1
            }
        } else {
            echo "Version not found in readme.txt"
            exit 1
        }

    - name: Extract release notes
      id: extract_notes
      shell: pwsh
      run: |
        $version = '${{ steps.read_version.outputs.version }}'
        $notes = (Get-Content readme.txt | Select-String -Pattern "□$version" -Context 0,1000).Context.PostContext |
                 Select-String -Pattern "□[0-9]+\.[0-9]+\.[0-9]+" -NotMatch |
                 ForEach-Object { " - $_" } | Out-String -Stream | Out-String
        echo "notes=$notes" >> $env:GITHUB_OUTPUT

    - name: Update Definition.cs
      shell: pwsh
      run: |
        $version = '${{ steps.read_version.outputs.version }}'
        $version_double = $version -replace '\.', ''
        (Get-Content Definition.cs) -replace 'CheckVersion = .*;', "CheckVersion = $version_double;" | Set-Content Definition.cs

    - name: Update side.csproj
      shell: pwsh
      run: |
        $version = '${{ steps.read_version.outputs.version }}'
        (Get-Content side.csproj) -replace '<Version>[0-9]+\.[0-9]+\.[0-9]+</Version>', "<Version>$version</Version>" | Set-Content side.csproj

    - name: Commit changes
      shell: pwsh
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add Definition.cs side.csproj
        git commit -m "Update version to ${{ steps.read_version.outputs.version }}"
        git push

    - name: Create tag
      shell: pwsh
      run: |
        $version = '${{ steps.read_version.outputs.version }}'
        git tag -a "v$version" -m "Release $version"
        git push origin "v$version"

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Build project
      shell: pwsh
      run: |
        msbuild /p:Configuration=Release /p:Platform="Any CPU" /p:RestorePackagesConfig=true /t:Restore,Build

    - name: Remove unnecessary files
      shell: pwsh
      run: |
        Remove-Item -Path side/bin/Release/net9.0-windows10.0.17763.0/Microsoft.Web.WebView2.Core.xml,
                          side/bin/Release/net9.0-windows10.0.17763.0/Microsoft.Web.WebView2.WinForms.xml,
                          side/bin/Release/net9.0-windows10.0.17763.0/Microsoft.Web.WebView2.Wpf.dll,
                          side/bin/Release/net9.0-windows10.0.17763.0/Microsoft.Web.WebView2.Wpf.xml,
                          side/bin/Release/net9.0-windows10.0.17763.0/Microsoft.Windows.SDK.NET.dll,
                          side/bin/Release/net9.0-windows10.0.17763.0/Microsoft.WindowsAPICodePack.ExtendedLinguisticServices.dll,
                          side/bin/Release/net9.0-windows10.0.17763.0/Microsoft.WindowsAPICodePack.Sensors.dll,
                          side/bin/Release/net9.0-windows10.0.17763.0/Microsoft.WindowsAPICodePack.ShellExtensions.dll -ErrorAction SilentlyContinue

    - name: Copy necessary files
      shell: pwsh
      run: |
        $targetPath = "side/bin/Release/net9.0-windows10.0.17763.0"
        Copy-Item -Path pictures -Destination $targetPath/ -Recurse
        Copy-Item -Path projects -Destination $targetPath/ -Recurse
        Copy-Item -Path runtime -Destination $targetPath/ -Recurse
        Copy-Item -Path readme.txt -Destination $targetPath/
        Copy-Item -Path 使い方.txt -Destination $targetPath/
        Copy-Item -Path 勝手にFx14説明書.txt -Destination $targetPath/
        Copy-Item -Path runtimes/MicrosoftEdgeWebview2Setup.exe -Destination "$targetPath/runtimes/"

    - name: Create ZIP file
      shell: pwsh
      run: |
        Compress-Archive -Path side/bin/Release/net9.0-windows10.0.17763.0/* -DestinationPath side/bin/Release/net9.0-windows10.0.17763.0/Side.zip

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ steps.read_version.outputs.version }}"
        release_name: "Side ${{ steps.read_version.outputs.version }}"
        body: ${{ steps.extract_notes.outputs.notes }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: side/bin/Release/net9.0-windows10.0.17763.0/Side.zip
        asset_name: Side.zip
        asset_content_type: application/zip

    - name: Upload to FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: side/bin/Release/net9.0-windows10.0.17763.0/Side.zip
        server-dir: ${{ secrets.FTP_SERVER_DIR }}
        dangerous-clean-slate: true
